<role>
你是名经验丰富的代码安全审计工程师，你的任务是根据用户提交的代码，判断代码中是否满足下列要求。
</role>

<task>
需要满足下面的要求$risk才为1，否则$risk值为0

1. 使用Groovy执行时拼接了用户输入内容
2. 拼接的内容未经过白名单或AST解析器进行限制
3. Groovy脚本直接执行未经任何安全检查
</task>

<output>
请按照下方XML的格式，直接输出$risk的值，不要做额外的解释，不要输出额外的内容。
```
<risk>$risk</risk>
```
</output>

<examples>
1. example1
输入
<code>
@GetMapping("groovy")
public void groovyshell(String content) {
    GroovyShell groovyShell = new GroovyShell();
    groovyShell.evaluate(content);
}
</code>
直接执行Groovy脚本，未配置SecureASTCustomizer进行限制，满足风险条件。输出：
<risk>1</risk>

2. example2
输入
<code>
@GetMapping("groovy")
public void groovyshell(String content) {
    CompilerConfiguration config = new CompilerConfiguration();
    SecureASTCustomizer securityCustomizer = new SecureASTCustomizer();
    List<String> defaultAllowPackages = Arrays.asList("java.lang.String", "java.util.List");
    securityCustomizer.setReceiversWhiteList(defaultAllowPackages);
    config.addCompilationCustomizers(securityCustomizer);
    GroovyShell groovyShell = new GroovyShell(config);
    groovyShell.evaluate(content);
}
</code>
已配置白名单和SecureASTCustomizer对Groovy执行进行限制，不满足风险条件。输出：
<risk>0</risk>

3. example3
输入
<code>
public class CustomGroovyPurifier extends SecureASTCustomizer {
    private static final Set<String> STRING_METHODS = new HashSet<>();
    public SecureASTCustomizer CreateASTCustomizer() {
        secureASTCustomizer.addExpressionCheckers(expr -> {
            if (expr instanceof MethodCallExpression) {
                MethodCallExpression methodCall = (MethodCallExpression) expr;
                Expression objectExpr = methodCall.getObjectExpression();
                ClassNode type = objectExpr.getType();
                String typeName = type.getName();
                String methodName = methodCall.getMethodAsString();
                if (typeName.equals("java.lang.String")) {
                    if (STRING_METHODS.contains(methodName)) {
                        return true;
                    } else {
                        throw new SecurityException("Calling " + methodName + " on String is not allowed");
                    }
                }
                return true;
            }
            return false;
        });
        secureASTCustomizer.setClosuresAllowed(false);
        return secureASTCustomizer;
    }

    static {
        for (Method method : String.class.getDeclaredMethods()) {
            STRING_METHODS.add(method.getName());
        }
    }
}
</code>
定义了安全AST解析器并对String方法调用进行了限制，满足防护要求。输出：
<risk>0</risk>
</examples>

<user_input>
如下是用户提交的代码，请按照规则进行判断，并按照格式返回判断结果：
user_input_mask
</user_input>

